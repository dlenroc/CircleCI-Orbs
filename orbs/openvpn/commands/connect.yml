description: >
  Connect to VPN

parameters:
  username:
    default: VPN_USERNAME
    type: env_var_name
  password:
    default: VPN_PASSWORD
    type: env_var_name
  totp-secret:
    default: VPN_TOTP_SECRET
    type: env_var_name
  config:
    default: VPN_CONFIG
    type: env_var_name
    description: >
      Base64 encoded configuration
  when:
    default: on_success
    type: enum
    enum: [always, on_fail, on_success]

steps:
  - run:
      name: Check VPN requirements
      when: << parameters.when >>
      command: |
        sudo killall openvpn || true

        if [ -z "$CIRCLE_IP" ]; then
          echo "export CIRCLE_IP=$(curl -s https://checkip.amazonaws.com)" >> $BASH_ENV
        fi

        if ! [ -x "$(command -v openvpn)" ]; then
          echo 'Error: openvpn is not installed.' >&2
          exit 1
        fi

        if [[ -z "${<< parameters.config >>:-}" ]]; then
          echo "Error: << parameters.config >> must be set and contain base64 encoded VPN configuration." >&2
          exit 1
        fi
  - run:
      name: Connect to VPN
      when: << parameters.when >>
      background: true
      command: |
        sudo -E bash \<<'BASH'
        export VPN_CONFIG="${<< parameters.config >>:-}"
        export VPN_USERNAME="${<< parameters.username >>:-}"
        export VPN_PASSWORD="${<< parameters.password >>:-}"
        export VPN_TOTP_SECRET="${<< parameters.totp-secret >>:-}"
        export MACHINE_IP=$(netstat -an | grep ':22 .*ESTABLISHED' | head -n1 | awk '{ split($5, a, ":"); print a[1] }')

        totp() {
          secret="${1}$(printf "%$(((8 - ${#1}) % 8))s" | tr " " "=")"
          key="$(base32 -d \<<<"$secret" | xxd -p | tr -cd 0-9A-Fa-f)"
          mac=$(printf "%016X" "$((($(date +%s)) / 30))" | xxd -r -p | openssl sha1 -binary -mac hmac -macopt "hexkey:${key}" | xxd -p)
          offset="$((16#${mac:39:1} * 2))"
          printf "%06d\n" "$(((0x${mac:offset:8} & 0x7FFFFFFF) % 1000000))"
        }

        vpn() {
          if [[ -z "${VPN_TOTP_SECRET}" ]]; then
            openvpn \
              --script-security 2 \
              --setenv PATH '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' \
              --up /etc/openvpn/update-systemd-resolved \
              --up-restart \
              --down /etc/openvpn/update-systemd-resolved \
              --down-pre \
              --route ${MACHINE_IP} 255.255.255.255 net_gateway \
              --route 169.254.0.0 255.255.0.0 net_gateway \
              --config <(echo "${VPN_CONFIG}" | base64 --decode) \
              ${VPN_USERNAME:+--auth-user-pass <(echo -e "${VPN_USERNAME}\n${VPN_PASSWORD}")}
          else
            VPN_TOTP="$(totp "$VPN_TOTP_SECRET")" \
            expect \<<-'EOF'
              spawn bash -c "\
                openvpn \
                  --script-security 2 \
                  --setenv PATH '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' \
                  --up /etc/openvpn/update-systemd-resolved \
                  --up-restart \
                  --down /etc/openvpn/update-systemd-resolved \
                  --down-pre \
                  --route \${MACHINE_IP} 255.255.255.255 net_gateway \
                  --route 169.254.0.0 255.255.0.0 net_gateway \
                  --config <(echo \"\${VPN_CONFIG}\" | base64 --decode) \
                  \${VPN_USERNAME:+--auth-user-pass <(echo -e \"\${VPN_USERNAME}\n\${VPN_PASSWORD}\")} \
                  \${VPN_TOTP_SECRET:+--connect-retry-max 5 --connect-retry 0 --auth-retry interact}\
              "

              expect "\nCHALLENGE:"
              send "$::env(VPN_TOTP)\n"
              expect -timeout -1 eof
        EOF
          fi
        }

        vpn
        BASH
  - run:
      name: Wait for VPN connection to be established
      when: << parameters.when >>
      no_output_timeout: 1m
      command: |
        set +e

        echo "CircleCI IP: ${CIRCLE_IP}"

        while true; do
          IP="$(curl -s https://checkip.amazonaws.com)"

          if [[ -n "${IP}" && "${CIRCLE_IP}" != "${IP}" ]]; then
            break
          fi

          sleep 1
        done

        echo "Current IP: ${IP}"
